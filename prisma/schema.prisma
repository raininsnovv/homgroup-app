// HomGroup - Строительная компания
// Схема базы данных для управления проектами, заказчиками и командой

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи системы (команда)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(EMPLOYEE)
  position  String?  // Должность
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  assignedProjects Project[] @relation("ProjectManager")
  workLogs         WorkLog[]
  events           Event[]

  @@map("users")
}

// Заказчики
model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  projects Project[]

  @@map("customers")
}

// Проекты/Объекты
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  address     String
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(12, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Связи
  customerId     String
  customer       Customer @relation(fields: [customerId], references: [id])
  managerId      String?
  manager        User?    @relation("ProjectManager", fields: [managerId], references: [id])
  workStages     WorkStage[]
  workLogs       WorkLog[]
  events         Event[]

  @@map("projects")
}

// Этапы работ
model WorkStage {
  id          String      @id @default(cuid())
  name        String
  description String?
  stageType   StageType
  status      StageStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  plannedCost Decimal?    @db.Decimal(12, 2)
  actualCost  Decimal?    @db.Decimal(12, 2)
  progress    Int         @default(0) // 0-100%
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Связи
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  workLogs  WorkLog[]

  @@map("work_stages")
}

// Журнал работ (затраты по этапам)
model WorkLog {
  id          String   @id @default(cuid())
  description String
  cost        Decimal  @db.Decimal(12, 2)
  hours       Decimal? @db.Decimal(8, 2)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Связи
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
  workStageId String?
  workStage   WorkStage? @relation(fields: [workStageId], references: [id])
  userId      String
  user        User @relation(fields: [userId], references: [id])

  @@map("work_logs")
}

// Журнал событий
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  eventType   EventType
  createdAt   DateTime  @default(now())

  // Связи
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  userId    String
  user      User @relation(fields: [userId], references: [id])

  @@map("events")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum StageType {
  FOUNDATION      // Заливка фундамента
  WALLS           // Возведение стен
  ROOF            // Строительство кровли
  ELECTRICAL      // Электромонтаж
  PLUMBING        // Сантехника
  FINISHING       // Отделочные работы
  LANDSCAPING     // Благоустройство
  OTHER           // Прочее
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum EventType {
  PROJECT_CREATED
  PROJECT_UPDATED
  STAGE_STARTED
  STAGE_COMPLETED
  COST_ADDED
  USER_ASSIGNED
  STATUS_CHANGED
  OTHER
}
