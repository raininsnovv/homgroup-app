// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum StageType {
  FOUNDATION
  FRAMING
  ROOFING
  ELECTRICAL
  PLUMBING
  FINISHING
  INSPECTION
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum EventType {
  PROJECT_CREATED
  PROJECT_UPDATED
  STAGE_STARTED
  STAGE_COMPLETED
  TEAM_MEMBER_ADDED
  TEAM_MEMBER_REMOVED
  CUSTOMER_ADDED
  CUSTOMER_UPDATED
  PAYMENT_RECEIVED
  DEADLINE_CHANGED
  STATUS_CHANGED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(EMPLOYEE)
  position  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects        Project[] @relation("ProjectManager")
  workLogs        WorkLog[]
  events          Event[]
  managedProjects Project[] @relation("ProjectManager")

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("customers")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  address     String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  managerId  String?
  manager    User?   @relation("ProjectManager", fields: [managerId], references: [id])
  
  workStages WorkStage[]
  workLogs   WorkLog[]
  events     Event[]

  @@map("projects")
}

model WorkStage {
  id          String      @id @default(cuid())
  name        String
  type        StageType
  status      StageStatus @default(NOT_STARTED)
  startDate   DateTime?
  endDate     DateTime?
  cost        Float?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  workLogs WorkLog[]

  @@map("work_stages")
}

model WorkLog {
  id          String   @id @default(cuid())
  description String
  hours       Float?
  cost        Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  stageId     String?
  stage       WorkStage? @relation(fields: [stageId], references: [id])
  
  userId      String
  user        User @relation(fields: [userId], references: [id])

  @@map("work_logs")
}

model Event {
  id          String    @id @default(cuid())
  type        EventType
  title       String
  description String?
  metadata    Json?
  createdAt   DateTime  @default(now())

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])

  @@map("events")
}